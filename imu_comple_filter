#include <Wire.h>
#define MPU_ADDR 0x68

int16_t ax, ay, az, gx, gy, gz;
float acc_pitch, acc_roll;
float gyro_pitch = 0, gyro_roll = 0;
float pitch = 0, roll = 0;

unsigned long prevTime = 0;
float dt;

void setup() {
  Serial.begin(115200);
  Wire.begin();

  // Wake up MPU6050
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);

  prevTime = millis();
}

void loop() {
  // === Read all 6 bytes of accel + 6 of gyro ===
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 14, true);

  ax = Wire.read() << 8 | Wire.read();
  ay = Wire.read() << 8 | Wire.read();
  az = Wire.read() << 8 | Wire.read();
  int16_t tempRaw = Wire.read() << 8 | Wire.read(); // skip temperature
  gx = Wire.read() << 8 | Wire.read();
  gy = Wire.read() << 8 | Wire.read();
  gz = Wire.read() << 8 | Wire.read();

  // === Time step ===
  unsigned long currTime = millis();
  dt = (currTime - prevTime) / 1000.0;
  prevTime = currTime;

  // === Convert gyro raw to °/s ===
  float gyroXrate = gx / 131.0;
  float gyroYrate = gy / 131.0;

  // === Accelerometer-based pitch and roll ===
  acc_pitch = atan2(ax, sqrt(ay * ay + az * az)) * (180.0 / PI);
  acc_roll  = atan2(ay, sqrt(ax * ax + az * az)) * (180.0 / PI);

  // === Integrate gyro to get angle ===
  gyro_pitch += gyroXrate * dt;
  gyro_roll  += gyroYrate * dt;

  // === Complementary Filter ===
  pitch = 0.98 * (pitch + gyroXrate * dt) + 0.02 * acc_pitch;
  roll  = 0.98 * (roll + gyroYrate * dt) + 0.02 * acc_roll;

  // === Print ===
  Serial.print("Pitch: "); Serial.print(pitch);
  Serial.print("°, Roll: "); Serial.println(roll);
  
  delay(10);  // very short delay for smooth updates
}

